#!/usr/bin/python

import os
import time
from slackclient import SlackClient

#used to call gims api
import requests
import json
import sys
import getpass
import argparse
import re



# gimsbot's ID as an environment variable
BOT_ID = "U7HMAE0MQ"

# constants
##in slack channel, use @gimsbot 
AT_BOT = "<@" + BOT_ID + ">"

# instantiate Slack & Twilio clients
SLACK_BOT_TOKEN='xoxb-255724476738-yaTEruaEsZgr643ypGd0yDrf'
slack_client = SlackClient(SLACK_BOT_TOKEN)

##gims env const
URL = 'https://gims.garenanow.com/api/servers'
AUTH_TOKEN = '7c57ab9bd9157d078d5be52f98a69a1957d3c7aebfaf92331b97d7f4f6361abf'

headers = {
    'Authorization': 'Bearer {}'.format(AUTH_TOKEN),
    'Content-Type': 'application/json'
}

#Input data validation
def data_validation (value):
    
    pattern = r"\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b"
    if re.match(pattern, value):

        return True
            
    else:
        return False

##call gims api to get data
def get_server_info_from_gims(serverinfo,value):
    
    payload = {serverinfo:value}

    res = requests.get(URL, params=payload,headers=headers)

    if res.status_code == requests.codes.ok:
      return res.json()

    else:
        print "Guess what ? Failed to get info from GIMS " 
        res.raise_for_status()



#use command "Service tag"
def handle_command(serverinfo,value,channel):
    

    gims_info = get_server_info_from_gims(serverinfo,value)[0]
    gims_link = "https://gims.garenanow.com/server/" + gims_info['st'] + "/display"

    gimsdata = {
       				      'rack': gims_info['rack'],
       				      'ipwan':gims_info['ipwan'],
                    'iplan':gims_info['iplan'],
                    'ipipmi':gims_info['ipipmi'],
                    'st': gims_info['st'],
                    'GIMSLink': gims_link
                }
 
    slack_client.api_call("chat.postMessage", channel=channel,
                          text="*Service tag*:%s\n*country*:%s\n*ipwan*:%s\n*iplan*:%s\n*GIMSLink*:%s\n" %(gims_info['st'],gims_info['country'],gims_info['ipwan'],gims_info['iplan'],gims_link), as_user=True)
    #slack_client.api_call("chat.postMessage",channel=channel,test=gimsdata,as_user=True)
def parse_slack_output(slack_rtm_output):
    """
        The Slack Real Time Messaging API is an events firehose.
        this parsing function returns None unless a message is
        directed at the Bot, based on its ID.
    """
    output_list = slack_rtm_output
    if output_list and len(output_list) > 0:
        for output in output_list:
            if output and 'text' in output and AT_BOT in output['text']:

                serverinfo = output['text'].split(' ')[1]
                value = output['text'].split(' ')[2]

                if serverinfo == "ipwan" or serverinfo == "iplan":
                    if data_validation(value)==True:
                        handle_command(serverinfo,value,output['channel'])
                    else: 
                        slack_client.api_call("chat.postMessage", channel=output['channel'],text='Mission Fail! Check the info you input, ok?')
                elif serverinfo == "st":
                    handle_command(serverinfo,value,output['channel'])
                else:
                    slack_client.api_call("chat.postMessage", channel=output['channel'],text="You have to start with *ipwan,iplan,st* ok?")


            
                    

    return None, None



if __name__ == "__main__":


    READ_WEBSOCKET_DELAY = 1 
    # 1 second delay between reading from firehose

    if slack_client.rtm_connect():
        print("GIMSbot connected and running!")

        
        while True:
            command,channel = parse_slack_output(slack_client.rtm_read())
            
           
            time.sleep(READ_WEBSOCKET_DELAY)
    else:
        print("Connection failed. Invalid Slack token or bot ID?")
